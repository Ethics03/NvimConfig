"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The parser registry, it allows to register custom parsers.
 */
class ParserRegistry {
    constructor() {
        this.PARSERS = [];
    }
    /**
     * Returns an array of registered parsers.
     */
    get parsers() {
        return [...this.PARSERS];
    }
    /**
     * Returns `true` if there are registered parsers and `false` otherwise.
     */
    get hasParsers() {
        return !!this.PARSERS.length;
    }
    /**
     * Register one or more parsers into the registry.
     *
     * @param singleOrMultipeParser one or an array of parsers implementing the `DateParser` type.
     */
    registerParsers(singleOrMultipeParser) {
        singleOrMultipeParser = Array.isArray(singleOrMultipeParser) ? [...singleOrMultipeParser] : [singleOrMultipeParser];
        singleOrMultipeParser.forEach(parser => {
            const exists = this.PARSERS.find(registeredParser => registeredParser === parser);
            if (!exists) {
                this.PARSERS.push(parser);
            }
        });
    }
    /**
     * Removes one or more parsers by reference.
     *
     * @param singleOrMultipeParser one or an array of parsers implementing the `DateParser` type.
     */
    removeParser(singleOrMultipeParser) {
        if (Array.isArray(singleOrMultipeParser)) {
            singleOrMultipeParser.forEach(singleParser => this.internalRemoveParser(singleParser));
        }
        else {
            this.internalRemoveParser(singleOrMultipeParser);
        }
    }
    internalRemoveParser(singleParser) {
        const index = this.PARSERS.findIndex(existingParser => existingParser == singleParser);
        if (index > -1) {
            this.PARSERS.splice(index, 1);
        }
    }
    /**
     * Removes all registered parsers.
     */
    resetParsers() {
        this.PARSERS.splice(0, this.PARSERS.length);
    }
}
exports.ParserRegistry = ParserRegistry;
/**
 * The defult parser registry. Parso will use the parsers registed in this
 * instance when no custom registry is provided in the options object.
 */
exports.defaulParserRegistry = new ParserRegistry();
//# sourceMappingURL=parser-registry.class.js.map
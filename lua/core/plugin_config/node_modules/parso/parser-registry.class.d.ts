import { DateParser } from './interfaces/date-parser.type';
/**
 * The parser registry, it allows to register custom parsers.
 */
export declare class ParserRegistry {
    private readonly PARSERS;
    /**
     * Returns an array of registered parsers.
     */
    readonly parsers: DateParser[];
    /**
     * Returns `true` if there are registered parsers and `false` otherwise.
     */
    readonly hasParsers: boolean;
    /**
     * Register one or more parsers into the registry.
     *
     * @param singleOrMultipeParser one or an array of parsers implementing the `DateParser` type.
     */
    registerParsers(singleOrMultipeParser: DateParser | DateParser[]): void;
    /**
     * Removes one or more parsers by reference.
     *
     * @param singleOrMultipeParser one or an array of parsers implementing the `DateParser` type.
     */
    removeParser(singleOrMultipeParser: DateParser | DateParser[]): void;
    private internalRemoveParser;
    /**
     * Removes all registered parsers.
     */
    resetParsers(): void;
}
/**
 * The defult parser registry. Parso will use the parsers registed in this
 * instance when no custom registry is provided in the options object.
 */
export declare const defaulParserRegistry: ParserRegistry;
